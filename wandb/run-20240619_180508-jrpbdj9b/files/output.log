Disabling AUROC metric.
	Because dataset has 0 =/= 1 categorical target columns.
Loaded metadata for fixed test set. n_cv_splits set to 1.
Fixed test set provided. n_cv_splits set to 1.
Percentage of each group: Train 0.18 | Val 0.03 | Test 0.80
train val test split:  [   0  224  256 1256]
mask matrices --------------------
[[False False False False False False]
 [False False  True False False False]
 [False False False False False False]
 ...
 [False False False False False False]
 [False False False False False False]
 [False False False False False False]] [[False False False False False False]
 [False False False False False False]
 [False False False False False False]
 ...
 [False False False False False False]
 [False False False False False False]
 [False False False False False False]] [[False False False False False False]
 [False False False False False False]
 [False False False False False False]
 ...
 [False False  True False False False]
 [False False  True False False False]
 [False False  True False False False]]
----------------------------------
new missing matrix ------------- [[False False False False False False]
 [False False  True False False False]
 [False False False False False False]
 ...
 [False False  True False False False]
 [False False  True False False False]
 [False False  True False False False]]
metadata {'N': 1256, 'D': 6, 'cat_features': [], 'num_features': [0, 1, 2, 3, 4, 5], 'cat_target_cols': [], 'num_target_cols': [2], 'input_feature_dims': [2, 2, 2, 2, 2, 2], 'fixed_test_set_index': 256, 'auroc_setting': False}
CV Index: 0
Train-test Split 1/1
Building NPT.
All features are either categorical or numerical. Not going to bother doing feature type embeddings.
Using feature type embedding (unique embedding for categorical and numerical features).
Using feature index embedding (unique embedding for each column).
Clipping gradients to value 1.0.
Model has 31576838 parameters,batch size -1.
Initialized "lookahead_lamb" optimizer.
Warming up for 70000.0/100000.0 steps.
Initialized "flat_and_anneal" learning rate scheduler.
Initialized "cosine" augmentation/label tradeoff annealer. Annealing to minimum value in 100000 steps.
Disabled AUROC in loss module.
end_experiment or self.eval_check(epoch) False False
Dataset mode -----  train
train
tensor([[0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True)
loss indices {'label': tensor([[0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True), 'augmentation': tensor([[0., 0., 0., 0., 1., 1.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True)}
Computing PINNs Loss:
0 tensor(193., grad_fn=<SumBackward0>)
/Users/devu/anaconda3/envs/npt/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:143: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
/Users/devu/PycharmProjects/non-parametric-transformers/npt/mask.py:108: UserWarning: torch.sparse.SparseTensor(indices, values, shape, *, device=) is deprecated.  Please use torch.sparse_coo_tensor(indices, values, shape, dtype=, device=). (Triggered internally at /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1711403207619/work/torch/csrc/utils/tensor_new.cpp:620.)
  mask = torch.sparse.FloatTensor(
residual tensor([[ 0.0273, -0.0140],
        [ 0.0205,  0.0082],
        [ 0.0074, -0.0225],
        ...,
        [-0.0098, -0.0066],
        [-0.0016,  0.0001],
        [ 0.0106, -0.0103]], grad_fn=<SubBackward0>)
torch.Size([1256, 2])
Physics Loss:  tensor(0.0005, grad_fn=<MeanBackward0>)
loss indices {'label': tensor([[0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True), 'augmentation': tensor([[0., 0., 0., 0., 1., 1.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True)}
Computing PINNs Loss:
1 tensor(172., grad_fn=<SumBackward0>)
residual tensor([[-0.0130,  0.0090],
        [ 0.0169,  0.0464],
        [-0.0017,  0.0257],
        ...,
        [-0.0418,  0.0106],
        [ 0.0054, -0.0179],
        [-0.0245,  0.0364]], grad_fn=<SubBackward0>)
torch.Size([1256, 2])
Physics Loss:  tensor(0.0005, grad_fn=<MeanBackward0>)
loss indices {'label': tensor([[0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True), 'augmentation': tensor([[0., 0., 0., 0., 1., 1.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True)}
Computing PINNs Loss:
2 tensor(1., grad_fn=<SumBackward0>)
1098
yoooo
residual tensor([[ 0.0100,  0.0198],
        [-0.0034,  0.0035],
        [ 0.0197,  0.0343],
        ...,
        [ 0.0016,  0.0629],
        [-0.0045,  0.0124],
        [ 0.0249,  0.0329]], grad_fn=<SubBackward0>)
torch.Size([1256, 2])
Physics Loss:  tensor(0.0010, grad_fn=<MeanBackward0>)
Computing PINNs Loss:
2 tensor(37., grad_fn=<SumBackward0>)
3
yoooo
12
yoooo
47
yoooo
67
yoooo
103
yoooo
112
yoooo
179
yoooo
246
yoooo
253
yoooo
299
yoooo
316
yoooo
381
yoooo
385
yoooo
407
yoooo
446
yoooo
473
yoooo
492
yoooo
535
yoooo
554
yoooo
566
yoooo
572
yoooo
647
yoooo
676
yoooo
690
yoooo
695
yoooo
706
yoooo
718
yoooo
764
yoooo
822
yoooo
925
yoooo
964
yoooo
972
yoooo
992
yoooo
1010
yoooo
1017
yoooo
1077
yoooo
1224
yoooo
residual tensor([[ 0.0100,  0.0198],
        [-0.0034,  0.0035],
        [ 0.0197,  0.0343],
        ...,
        [ 0.0016,  0.0629],
        [-0.0045,  0.0124],
        [ 0.0249,  0.0329]], grad_fn=<SubBackward0>)
torch.Size([1256, 2])
Physics Loss:  tensor(0.0010, grad_fn=<MeanBackward0>)
loss indices {'label': tensor([[0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True), 'augmentation': tensor([[0., 0., 0., 0., 1., 1.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True)}
Computing PINNs Loss:
3 tensor(202., grad_fn=<SumBackward0>)
residual tensor([[-0.0275,  0.0048],
        [-0.0345,  0.0051],
        [-0.0394, -0.0055],
        ...,
        [-0.0022, -0.0020],
        [-0.0008,  0.0268],
        [-0.0258, -0.0131]], grad_fn=<SubBackward0>)
torch.Size([1256, 2])
Physics Loss:  tensor(0.0006, grad_fn=<MeanBackward0>)
loss indices {'label': tensor([[0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True), 'augmentation': tensor([[0., 0., 0., 0., 1., 1.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True)}
Computing PINNs Loss:
4 tensor(179., grad_fn=<SumBackward0>)
residual tensor([[-0.0116,  0.0334],
        [-0.0137, -0.0039],
        [ 0.0034,  0.0144],
        ...,
        [ 0.0072,  0.0028],
        [ 0.0105,  0.0106],
        [-0.0002, -0.0069]], grad_fn=<SubBackward0>)
torch.Size([1256, 2])
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
loss indices {'label': tensor([[0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True), 'augmentation': tensor([[0., 0., 0., 0., 1., 1.],
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0.],
        ...,
        [0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0.]], requires_grad=True)}
Computing PINNs Loss:
5 tensor(187., grad_fn=<SumBackward0>)
residual tensor([[-1.6405e-02, -3.6073e-02],
        [-6.1422e-03, -4.6025e-02],
        [ 1.7279e-02, -3.6258e-02],
        ...,
        [ 4.6725e-05, -5.1953e-02],
        [ 1.1206e-02, -1.8549e-02],
        [-4.3017e-03, -2.7667e-02]], grad_fn=<SubBackward0>)
torch.Size([1256, 2])
Physics Loss:  tensor(0.0009, grad_fn=<MeanBackward0>)
