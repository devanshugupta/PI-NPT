/Users/devu/anaconda3/envs/npt/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:143: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
/Users/devu/PycharmProjects/non-parametric-transformers/npt/mask.py:108: UserWarning: torch.sparse.SparseTensor(indices, values, shape, *, device=) is deprecated.  Please use torch.sparse_coo_tensor(indices, values, shape, dtype=, device=). (Triggered internally at /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1711403207619/work/torch/csrc/utils/tensor_new.cpp:620.)
  mask = torch.sparse.FloatTensor(
Loaded metadata for fixed test set. n_cv_splits set to 1.
CV Splits for this dataset are cached. Loading from file.
CV Index: 0
Train-test Split 1/1
Building NPT.
All features are either categorical or numerical. Not going to bother doing feature type embeddings.
Using feature type embedding (unique embedding for categorical and numerical features).
Using feature index embedding (unique embedding for each column).
Clipping gradients to value 1.0.
Model has 31576838 parameters,batch size -1.
Initialized "lookahead_lamb" optimizer.
Warming up for 70000.0/100000.0 steps.
Initialized "flat_and_anneal" learning rate scheduler.
Initialized "cosine" augmentation/label tradeoff annealer. Annealing to minimum value in 100000 steps.
Disabled AUROC in loss module.
end_experiment or self.eval_check(epoch) False False
Dataset mode -----  train
number of predicted values: ---------- tensor(185., grad_fn=<SumBackward0>)
col loss indices --------- 0 ---------- tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(181., grad_fn=<SumBackward0>)
col loss indices --------- 1 ---------- tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(224., grad_fn=<SumBackward0>)
col loss indices --------- 2 ---------- tensor([0., 1., 1.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(0., grad_fn=<SumBackward0>)
col loss indices --------- 2 ---------- tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(201., grad_fn=<SumBackward0>)
col loss indices --------- 3 ---------- tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(189., grad_fn=<SumBackward0>)
col loss indices --------- 4 ---------- tensor([1., 0., 0.,  ..., 0., 1., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(175., grad_fn=<SumBackward0>)
col loss indices --------- 5 ---------- tensor([1., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
Done -------------------------epoch  1
end_experiment or self.eval_check(epoch) False False
Dataset mode -----  train
number of predicted values: ---------- tensor(202., grad_fn=<SumBackward0>)
col loss indices --------- 0 ---------- tensor([0., 1., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(193., grad_fn=<SumBackward0>)
col loss indices --------- 1 ---------- tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(224., grad_fn=<SumBackward0>)
col loss indices --------- 2 ---------- tensor([0., 0., 1.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(0., grad_fn=<SumBackward0>)
col loss indices --------- 2 ---------- tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(175., grad_fn=<SumBackward0>)
col loss indices --------- 3 ---------- tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(188., grad_fn=<SumBackward0>)
col loss indices --------- 4 ---------- tensor([1., 0., 0.,  ..., 0., 1., 1.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(191., grad_fn=<SumBackward0>)
col loss indices --------- 5 ---------- tensor([1., 0., 0.,  ..., 1., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0003, grad_fn=<MeanBackward0>)
Done -------------------------epoch  2
end_experiment or self.eval_check(epoch) False False
Dataset mode -----  train
number of predicted values: ---------- tensor(194., grad_fn=<SumBackward0>)
col loss indices --------- 0 ---------- tensor([0., 0., 1.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0002, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(191., grad_fn=<SumBackward0>)
col loss indices --------- 1 ---------- tensor([0., 0., 0.,  ..., 0., 0., 1.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0002, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(224., grad_fn=<SumBackward0>)
col loss indices --------- 2 ---------- tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0002, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(0., grad_fn=<SumBackward0>)
col loss indices --------- 2 ---------- tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0002, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(212., grad_fn=<SumBackward0>)
col loss indices --------- 3 ---------- tensor([1., 0., 0.,  ..., 0., 0., 1.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0002, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(194., grad_fn=<SumBackward0>)
col loss indices --------- 4 ---------- tensor([0., 0., 0.,  ..., 0., 1., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0002, grad_fn=<MeanBackward0>)
number of predicted values: ---------- tensor(204., grad_fn=<SumBackward0>)
col loss indices --------- 5 ---------- tensor([0., 0., 1.,  ..., 0., 1., 0.], grad_fn=<SelectBackward0>)
Computing PINNs Loss:
Physics Loss:  tensor(0.0002, grad_fn=<MeanBackward0>)
