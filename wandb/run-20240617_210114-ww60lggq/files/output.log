Loaded metadata for fixed test set. n_cv_splits set to 1.
CV Splits for this dataset are cached. Loading from file.
CV Index: 0
Train-test Split 1/1
Building NPT.
All features are either categorical or numerical. Not going to bother doing feature type embeddings.
Using feature type embedding (unique embedding for categorical and numerical features).
Using feature index embedding (unique embedding for each column).
Clipping gradients to value 1.0.
Model has 31576838 parameters,batch size -1.
Initialized "lookahead_lamb" optimizer.
Warming up for 70000.0/100000.0 steps.
Initialized "flat_and_anneal" learning rate scheduler.
Initialized "cosine" augmentation/label tradeoff annealer. Annealing to minimum value in 100000 steps.
Disabled AUROC in loss module.
Computing PINNs Loss:
u_pred requires_grad, grad_fn------: True,<AddmmBackward0 object at 0x325669880>
x requires_grad, grad_fn---------: True,None
t requires_grad, grad_fn--------: True,None
u_sum-------- tensor(-270.2022, grad_fn=<SumBackward0>)
/Users/devu/anaconda3/envs/npt/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:143: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
/Users/devu/PycharmProjects/non-parametric-transformers/npt/mask.py:108: UserWarning: torch.sparse.SparseTensor(indices, values, shape, *, device=) is deprecated.  Please use torch.sparse_coo_tensor(indices, values, shape, dtype=, device=). (Triggered internally at /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1711403207619/work/torch/csrc/utils/tensor_new.cpp:620.)
  mask = torch.sparse.FloatTensor(
Gradients shape ------- torch.Size([1256, 2]) torch.Size([1256, 2])
Physics Loss:  tensor(0.0004, grad_fn=<MeanBackward0>)
Done -------------------------epoch  1
Computing PINNs Loss:
u_pred requires_grad, grad_fn------: True,<AddmmBackward0 object at 0x325669370>
x requires_grad, grad_fn---------: True,None
t requires_grad, grad_fn--------: True,None
u_sum-------- tensor(315.6790, grad_fn=<SumBackward0>)
Gradients shape ------- torch.Size([1256, 2]) torch.Size([1256, 2])
Physics Loss:  tensor(0.0002, grad_fn=<MeanBackward0>)
Done -------------------------epoch  2
Computing PINNs Loss:
u_pred requires_grad, grad_fn------: True,<AddmmBackward0 object at 0x3256691c0>
x requires_grad, grad_fn---------: True,None
t requires_grad, grad_fn--------: True,None
u_sum-------- tensor(213.2751, grad_fn=<SumBackward0>)
Gradients shape ------- torch.Size([1256, 2]) torch.Size([1256, 2])
Physics Loss:  tensor(0.0004, grad_fn=<MeanBackward0>)
Done -------------------------epoch  3
Computing PINNs Loss:
u_pred requires_grad, grad_fn------: True,<AddmmBackward0 object at 0x325669340>
x requires_grad, grad_fn---------: True,None
t requires_grad, grad_fn--------: True,None
u_sum-------- tensor(-107.8684, grad_fn=<SumBackward0>)
Gradients shape ------- torch.Size([1256, 2]) torch.Size([1256, 2])
Physics Loss:  tensor(0.0008, grad_fn=<MeanBackward0>)
Done -------------------------epoch  4
Computing PINNs Loss:
u_pred requires_grad, grad_fn------: True,<AddmmBackward0 object at 0x325669880>
x requires_grad, grad_fn---------: True,None
t requires_grad, grad_fn--------: True,None
u_sum-------- tensor(-218.6508, grad_fn=<SumBackward0>)
Gradients shape ------- torch.Size([1256, 2]) torch.Size([1256, 2])
Physics Loss:  tensor(0.0015, grad_fn=<MeanBackward0>)
Done -------------------------epoch  5
Traceback (most recent call last):
  File "run.py", line 204, in <module>
    main(args)
  File "run.py", line 23, in main
    run_cv(args=args, wandb_args=wandb_args)
  File "run.py", line 117, in run_cv
    run_cv_splits(wandb_args, args, c, wandb_run)
  File "run.py", line 195, in run_cv_splits
    trainer.train_and_eval()
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 216, in train_and_eval
    if self.per_epoch_train_eval(epoch=epoch):
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 175, in per_epoch_train_eval
    early_stop = self.eval_model(
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 224, in eval_model
    val_loss = self.run_epoch(dataset_mode='val', **kwargs)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 437, in run_epoch
    self.run_batch(
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 546, in run_batch
    self.forward_and_loss(**forward_kwargs)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 613, in forward_and_loss
    self.loss.compute(**loss_kwargs)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/loss.py", line 96, in compute
    loss_dict = self.compute_loss(*args, **kwargs)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/loss.py", line 318, in compute_loss
    physics_loss = self.convection_diffusion_loss(output, ground_truth_data, data_dict, masked_tensors)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/loss.py", line 148, in convection_diffusion_loss
    u_t = torch.autograd.grad(u.sum(), t, create_graph=True)[0]
  File "/Users/devu/anaconda3/envs/npt/lib/python3.8/site-packages/torch/autograd/__init__.py", line 411, in grad
    result = Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
Traceback (most recent call last):
  File "run.py", line 204, in <module>
    main(args)
  File "run.py", line 23, in main
    run_cv(args=args, wandb_args=wandb_args)
  File "run.py", line 117, in run_cv
    run_cv_splits(wandb_args, args, c, wandb_run)
  File "run.py", line 195, in run_cv_splits
    trainer.train_and_eval()
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 216, in train_and_eval
    if self.per_epoch_train_eval(epoch=epoch):
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 175, in per_epoch_train_eval
    early_stop = self.eval_model(
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 224, in eval_model
    val_loss = self.run_epoch(dataset_mode='val', **kwargs)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 437, in run_epoch
    self.run_batch(
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 546, in run_batch
    self.forward_and_loss(**forward_kwargs)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/train.py", line 613, in forward_and_loss
    self.loss.compute(**loss_kwargs)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/loss.py", line 96, in compute
    loss_dict = self.compute_loss(*args, **kwargs)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/loss.py", line 318, in compute_loss
    physics_loss = self.convection_diffusion_loss(output, ground_truth_data, data_dict, masked_tensors)
  File "/Users/devu/PycharmProjects/non-parametric-transformers/npt/loss.py", line 148, in convection_diffusion_loss
    u_t = torch.autograd.grad(u.sum(), t, create_graph=True)[0]
  File "/Users/devu/anaconda3/envs/npt/lib/python3.8/site-packages/torch/autograd/__init__.py", line 411, in grad
    result = Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: One of the differentiated Tensors appears to not have been used in the graph. Set allow_unused=True if this is the desired behavior.
Using torch no grad, eval model= True
Dataset mode -----  val
Computing PINNs Loss:
u_pred requires_grad, grad_fn------: True,None
x requires_grad, grad_fn---------: True,None
t requires_grad, grad_fn--------: True,None
u_sum-------- tensor(36.3681, grad_fn=<SumBackward0>)